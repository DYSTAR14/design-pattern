D :- Dependency Inversion Principle (DIP)
	Def : High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.
	Ex : Feature should be Decouple not tightly couple, By use of interface and abstraction
	The DIP encourages the use of abstractions (interfaces or abstract classes) to decouple high-level and low-level modules, making the system more flexible and easier to modify. 
```
// Before applying DIP
class LightBulb {
    public void turnOn() {
        // Turn on light
    }

    public void turnOff() {
        // Turn off light
    }
}

class Switch {
    private LightBulb lightBulb;

    public Switch(LightBulb lightBulb) {
        this.lightBulb = lightBulb;
    }

    public void operate() {
        lightBulb.turnOn();
    }
}

// After applying DIP
interface Switchable {
    void turnOn();
    void turnOff();
}

class LightBulb implements Switchable {
    @Override
    public void turnOn() {
        // Turn on light
    }

    @Override
    public void turnOff() {
        // Turn off light
    }
}

class Fan implements Switchable {
    @Override
    public void turnOn() {
        // Turn on fan
    }

    @Override
    public void turnOff() {
        // Turn off fan
    }
}

class Switch {
    private Switchable device;

    public Switch(Switchable device) {
        this.device = device;
    }

    public void operate() {
        device.turnOn();
    }
}
```